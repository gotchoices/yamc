#!/bin/bash
# ssh2user/setup - Copy SSH key to another user
#
# This script copies the current user's SSH public key to another user's
# authorized_keys file, enabling passwordless SSH access as that user.
#
# Usage: yamc -h hostname -u someuser ssh2user [-e target=targetuser]

set -e  # Exit on any error

echo "===== Installing SSH Key for Target User ====="

# Get the target user (defaults to root)
TARGET_USER="${target:-root}"
echo "Target user: $TARGET_USER"

# Verify the target user exists
if ! id "$TARGET_USER" &>/dev/null; then
  echo "ERROR: Target user '$TARGET_USER' does not exist on the system."
  echo "Please create the user first or specify a different target user."
  exit 1
fi

# Get target user's home directory
TARGET_HOME=$(eval echo ~$TARGET_USER)
echo "Target home directory: $TARGET_HOME"

# Ensure we're working with the current user's key
# Get current user's public key from authorized_keys (or id_rsa.pub if available)
if [ ! -z "$loc_user_pubkey" ]; then
  USER_PUBKEY="$loc_user_pubkey"
  KEY_SOURCE="local_user"
elif [ -f ~/.ssh/authorized_keys ]; then
  USER_PUBKEY=$(cat ~/.ssh/authorized_keys | head -n 1)
  KEY_SOURCE="authorized_keys"
elif [ -f ~/.ssh/id_rsa.pub ]; then
  USER_PUBKEY=$(cat ~/.ssh/id_rsa.pub)
  KEY_SOURCE="id_rsa.pub"
else
  echo "ERROR: No SSH key found in authorized_keys or id_rsa.pub."
  echo "YAMC init should have set this up. Please run yamc init first."
  exit 1
fi

echo "Using SSH key from $KEY_SOURCE"

# Create target user's .ssh directory if needed
echo "Setting up SSH directory for $TARGET_USER..."
sudo mkdir -p "$TARGET_HOME/.ssh"

echo "USER_PUBKEY:$USER_PUBKEY"
echo "LOC_USER_PUBKEY:$loc_user_pubkey"
# Check if the key is already in target user's authorized_keys
if sudo test -f "$TARGET_HOME/.ssh/authorized_keys" && sudo grep -qF "$USER_PUBKEY" "$TARGET_HOME/.ssh/authorized_keys"; then
  echo "SSH key already exists in $TARGET_USER's authorized_keys file."
else
  echo "Adding your SSH key to $TARGET_USER's authorized_keys file..."
  echo "$USER_PUBKEY" | sudo tee -a "$TARGET_HOME/.ssh/authorized_keys" > /dev/null
fi

# Set proper permissions for security
echo "Setting proper permissions..."
sudo chmod 700 "$TARGET_HOME/.ssh"
sudo chmod 600 "$TARGET_HOME/.ssh/authorized_keys"
sudo chown -R "$TARGET_USER:$(id -gn $TARGET_USER)" "$TARGET_HOME/.ssh"

# Check if we're installing for root, and if so, check SSH configuration
if [ "$TARGET_USER" = "root" ]; then
  echo "Checking current SSH configuration for root login..."
  
  if grep -q "^PermitRootLogin prohibit-password\|^PermitRootLogin without-password" /etc/ssh/sshd_config; then
    echo "SSH configuration looks good: root login with key authentication is allowed."
  elif grep -q "^PermitRootLogin yes" /etc/ssh/sshd_config; then
    echo "NOTE: SSH is configured to allow root login with password."
    echo "This is less secure but will allow key authentication to work."
  elif grep -q "^PermitRootLogin no" /etc/ssh/sshd_config; then
    echo "WARNING: SSH is configured to disallow ALL root logins."
    echo "You will need to manually edit /etc/ssh/sshd_config and change:"
    echo "  PermitRootLogin no"
    echo "to:"
    echo "  PermitRootLogin prohibit-password"
    echo "Then restart the SSH service for the changes to take effect."
  else
    echo "NOTE: Could not determine SSH root login configuration."
    echo "If you cannot log in as root via SSH, you may need to edit /etc/ssh/sshd_config"
    echo "and add: PermitRootLogin prohibit-password"
    echo "Then restart the SSH service."
  fi
fi

echo "===== SSH Access Configuration Complete ====="
echo "You can now SSH directly to the $TARGET_USER account with:"
echo "  ssh $TARGET_USER@$(hostname -f)"
echo ""
exit 0
